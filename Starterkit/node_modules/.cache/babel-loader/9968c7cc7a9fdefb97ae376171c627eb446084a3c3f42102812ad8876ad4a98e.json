{"ast":null,"code":"// import Vue from 'vue'\nimport { createRouter, createWebHistory } from 'vue-router';\n// https://github.com/declandewet/vue-meta\n// import VueMeta from 'vue-meta'\n\nimport store from '@/state/store';\nimport routes from './routes';\n\n// Vue.use(VueRouter)\n// Vue.use(VueMeta, {\n//   // The component option name that vue-meta looks for meta info on.\n//   keyName: 'page',\n// })\n\nconst router = createRouter({\n  // 4. Provide the history implementation to use. We are using the hash history for simplicity here.\n  history: createWebHistory(),\n  routes,\n  // short for `routes: routes`,\n  scrollBehavior(to, from, savedPosition) {\n    if (savedPosition) {\n      return savedPosition;\n    } else {\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n  }\n});\n\n// const router = new VueRouter({\n//   routes,\n//   // Use the HTML5 history API (i.e. normal-looking routes)\n//   // instead of routes with hashes (e.g. example.com/#/about).\n//   // This may require some server configuration in production:\n//   // https://router.vuejs.org/en/essentials/history-mode.html#example-server-configurations\n//   mode: 'history',\n//   // Simulate native-like scroll behavior when navigating to a new\n//   // route and using back/forward buttons.\n//   scrollBehavior(to, from, savedPosition) {\n//     if (savedPosition) {\n//       return savedPosition\n//     } else {\n//       return {\n//         x: 0,\n//         y: 0\n//       }\n//     }\n//   },\n// })\n\n// Before each route evaluates...\nrouter.beforeEach((routeTo, routeFrom, next) => {\n  if (process.env.VUE_APP_DEFAULT_AUTH === \"firebase\") {\n    // Check if auth is required on this route\n    // (including nested routes).\n    const authRequired = routeTo.matched.some(route => route.meta.authRequired);\n\n    // If auth isn't required for the route, just continue.\n    if (!authRequired) return next();\n\n    // If auth is required and the user is logged in...\n    if (store.getters['auth/loggedIn']) {\n      // Validate the local user token...\n      return store.dispatch('auth/validate').then(validUser => {\n        // Then continue if the token still represents a valid user,\n        // otherwise redirect to login.\n        validUser ? next() : redirectToLogin();\n      });\n    }\n\n    // If auth is required and the user is NOT currently logged in,\n    // redirect to login.\n    redirectToLogin();\n\n    // eslint-disable-next-line no-unused-vars\n    // eslint-disable-next-line no-inner-declarations\n    function redirectToLogin() {\n      // Pass the original route to the login component\n      next({\n        name: 'login',\n        query: {\n          redirectFrom: routeTo.fullPath\n        }\n      });\n    }\n  } else {\n    const publicPages = ['/login', '/register', '/forgot-password'];\n    const authpage = !publicPages.includes(routeTo.path);\n    const loggeduser = localStorage.getItem('user');\n    if (authpage && !loggeduser) {\n      return next('/login');\n    }\n    next();\n  }\n});\nrouter.beforeResolve(async (routeTo, routeFrom, next) => {\n  // Create a `beforeResolve` hook, which fires whenever\n  // `beforeRouteEnter` and `beforeRouteUpdate` would. This\n  // allows us to ensure data is fetched even when params change,\n  // but the resolved route does not. We put it in `meta` to\n  // indicate that it's a hook we created, rather than part of\n  // Vue Router (yet?).\n  try {\n    // For each matched route...\n    for (const route of routeTo.matched) {\n      await new Promise((resolve, reject) => {\n        // If a `beforeResolve` hook is defined, call it with\n        // the same arguments as the `beforeEnter` hook.\n        if (route.meta && route.meta.beforeResolve) {\n          route.meta.beforeResolve(routeTo, routeFrom, (...args) => {\n            // If the user chose to redirect...\n            if (args.length) {\n              // If redirecting to the same route we're coming from...\n              // Complete the redirect.\n              next(...args);\n              reject(new Error('Redirected'));\n            } else {\n              resolve();\n            }\n          });\n        } else {\n          // Otherwise, continue resolving the route.\n          resolve();\n        }\n      });\n    }\n    // If a `beforeResolve` hook chose to redirect, just return.\n  } catch (error) {\n    return;\n  }\n\n  // If we reach this point, continue resolving the route.\n  next();\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","store","routes","router","history","scrollBehavior","to","from","savedPosition","x","y","beforeEach","routeTo","routeFrom","next","process","env","VUE_APP_DEFAULT_AUTH","authRequired","matched","some","route","meta","getters","dispatch","then","validUser","redirectToLogin","name","query","redirectFrom","fullPath","publicPages","authpage","includes","path","loggeduser","localStorage","getItem","beforeResolve","Promise","resolve","reject","args","length","Error","error"],"sources":["/Users/michaelrellaford/Documents/velgame/Starterkit/src/router/index.js"],"sourcesContent":["// import Vue from 'vue'\nimport { createRouter, createWebHistory } from 'vue-router'\n// https://github.com/declandewet/vue-meta\n// import VueMeta from 'vue-meta'\n\nimport store from '@/state/store'\nimport routes from './routes'\n\n// Vue.use(VueRouter)\n// Vue.use(VueMeta, {\n//   // The component option name that vue-meta looks for meta info on.\n//   keyName: 'page',\n// })\n\nconst router = createRouter({\n  // 4. Provide the history implementation to use. We are using the hash history for simplicity here.\n  history: createWebHistory(),\n  routes, // short for `routes: routes`,\n  scrollBehavior(to, from, savedPosition) {\n    if (savedPosition) {\n      return savedPosition\n    } else {\n      return {\n        x: 0,\n        y: 0\n      }\n    }\n  }\n})\n\n// const router = new VueRouter({\n//   routes,\n//   // Use the HTML5 history API (i.e. normal-looking routes)\n//   // instead of routes with hashes (e.g. example.com/#/about).\n//   // This may require some server configuration in production:\n//   // https://router.vuejs.org/en/essentials/history-mode.html#example-server-configurations\n//   mode: 'history',\n//   // Simulate native-like scroll behavior when navigating to a new\n//   // route and using back/forward buttons.\n//   scrollBehavior(to, from, savedPosition) {\n//     if (savedPosition) {\n//       return savedPosition\n//     } else {\n//       return {\n//         x: 0,\n//         y: 0\n//       }\n//     }\n//   },\n// })\n\n// Before each route evaluates...\nrouter.beforeEach((routeTo, routeFrom, next) => {\n  if (process.env.VUE_APP_DEFAULT_AUTH === \"firebase\") {\n    // Check if auth is required on this route\n    // (including nested routes).\n    const authRequired = routeTo.matched.some((route) => route.meta.authRequired)\n\n    // If auth isn't required for the route, just continue.\n    if (!authRequired) return next()\n\n    // If auth is required and the user is logged in...\n    if (store.getters['auth/loggedIn']) {\n      // Validate the local user token...\n      return store.dispatch('auth/validate').then((validUser) => {\n        // Then continue if the token still represents a valid user,\n        // otherwise redirect to login.\n        validUser ? next() : redirectToLogin()\n      })\n    }\n\n    // If auth is required and the user is NOT currently logged in,\n    // redirect to login.\n    redirectToLogin()\n\n    // eslint-disable-next-line no-unused-vars\n    // eslint-disable-next-line no-inner-declarations\n    function redirectToLogin() {\n      // Pass the original route to the login component\n      next({\n        name: 'login',\n        query: {\n          redirectFrom: routeTo.fullPath\n        }\n      })\n    }\n  } else {\n    const publicPages = ['/login', '/register', '/forgot-password'];\n    const authpage = !publicPages.includes(routeTo.path);\n    const loggeduser = localStorage.getItem('user');\n\n    if (authpage && !loggeduser) {\n      return next('/login');\n    }\n\n    next();\n  }\n})\n\nrouter.beforeResolve(async (routeTo, routeFrom, next) => {\n  // Create a `beforeResolve` hook, which fires whenever\n  // `beforeRouteEnter` and `beforeRouteUpdate` would. This\n  // allows us to ensure data is fetched even when params change,\n  // but the resolved route does not. We put it in `meta` to\n  // indicate that it's a hook we created, rather than part of\n  // Vue Router (yet?).\n  try {\n    // For each matched route...\n    for (const route of routeTo.matched) {\n      await new Promise((resolve, reject) => {\n        // If a `beforeResolve` hook is defined, call it with\n        // the same arguments as the `beforeEnter` hook.\n        if (route.meta && route.meta.beforeResolve) {\n          route.meta.beforeResolve(routeTo, routeFrom, (...args) => {\n            // If the user chose to redirect...\n            if (args.length) {\n              // If redirecting to the same route we're coming from...\n              // Complete the redirect.\n              next(...args)\n              reject(new Error('Redirected'))\n            } else {\n              resolve()\n            }\n          })\n        } else {\n          // Otherwise, continue resolving the route.\n          resolve()\n        }\n      })\n    }\n    // If a `beforeResolve` hook chose to redirect, just return.\n  } catch (error) {\n    return\n  }\n\n  // If we reach this point, continue resolving the route.\n  next()\n})\n\nexport default router"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}