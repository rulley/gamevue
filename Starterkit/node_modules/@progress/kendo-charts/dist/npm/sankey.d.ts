/**
 * Represents the highlight options of the Sankey links.
 */
export interface SankeyLinkHighlight {
    /**
     * The opacity of the link.
     *
     * @default 0.8
     */
    opacity?: number;
    /**
     * The opacity of the inactive link.
     *
     * @default 0.2
     */
    inactiveOpacity?: number;
}

/**
 * Represents the offset option of the Sankey node and label elements.
 *
 * @default `{ top: 0, left: 0 }`
 */
export interface SankeyOffset {
    left?: number;
    top?: number;
}

/**
 * Represents the links options of the Sankey widget.
 */
export interface SankeyLink {
    /**
     * The source node ID of the link.
     */
    sourceId: string | number;
    /**
     * The target node ID of the link.
     */
    targetId: string | number;
    /**
     * The value of the link.
     */
    value: number;
    /**
     * The color type of the link.
     * The supported values are:
     * * `static`&mdash;The link color is static. The color is determined by the link's `color` option.
     * * `source`&mdash;The link color is the same as the source node color.
     * * `target`&mdash;The link color is the same as the target node color.
     *
     * @default 'static'
     */
    colorType?: 'static' | 'source' | 'target';
    /**
     * The color of the link.
     * The color is used when the `colorType` option is set to `static`.
     */
    color?: string;
    /**
     * The opacity of the link.
     *
     * @default 0.4
     */
    opacity?: number;
    /**
     * The highlight options of the link.
     *
     * @default `{ opacity: 0.8, inactiveOpacity: 0.2 }`
     */
    highlight?: SankeyLinkHighlight;
}

/**
 * Represents the labels options of the Sankey widget.
 */
export interface SankeyLabel {
    /**
     * The text of the label.
     */
    text?: string;
    /**
     * The visibility of the label.
     *
     * @default true
     */
    visible?: boolean;
    /**
     * The font of the label.
     */
    font?: string;
    /**
     * The color of the label.
     */
    color?: string;
    /**
     * The opacity of the label.
     *
     * @default 1
     */
    opacity?: number;
    /**
     * The alignment of the label.
     *
     * @default 'left'
     */
    align?: 'left' | 'right' | 'center';
    /**
     * The position of the label.
     *
     * The supported values are:
     * * `inside`&mdash;The label is positioned after the node, except for the nodes at the end of the Sankey, that are placed before the node.
     * * `before`&mdash;The label is positioned before the node.
     * * `after`&mdash;The label is positioned after the node.
     *
     * @default 'inside'
     */
    position?: 'inside' | 'before' | 'after';
    /**
     * The padding of the label.
     *
     * @default 0
     */
    padding?: number | {
        left?: number;
        right?: number;
        top?: number;
        bottom?: number;
    };
    /**
     * The margin of the label.
     *
     * @default `{ left: 8, right: 8 }`
     */
    margin?: {
        left?: number;
        right?: number;
    };
    /**
     * The border of the label.
     *
     * @default `{ width: 0 }`
     */
    border?: {
        width?: number;
        color?: string;
        opacity?: number;
        dashType?: string;
    };
    /**
     * The offset applied to the label's position.
     *
     * @default `{ top: 0, left: 0 }`
     */
    offset?: SankeyOffset;
}

/**
 * Represents the nodes options of the Sankey widget.
 */
export interface SankeyNode {
    /**
     * The ID of the node.
     */
    id: string | number;
    /**
     * The label options of the node.
     */
    label: SankeyLabel;
    /**
     * The color of the node.
     */
    color?: string;
    /**
     * The opacity of the node.
     *
     * @default 1
     */
    opacity?: number;
    /**
     * The offset applied to the node's position.
     *
     * @default `{ top: 0, left: 0 }`
     */
    offset?: SankeyOffset;
    /**
     * The minimum vertical space between two nodes.
     *
     * @default 16
     */
    padding?: number;
    /**
     * The width of the node.
     *
     * @default 24
     */
    width?: number;
}

/**
 * Represents the default link options of the Sankey widget.
 * The value will be applied to all links unless overridden by the `links` prop of the Sankey data option.
 */
export interface SankeyLinkDefaults extends Omit<SankeyLink, 'sourceId' | 'targetId' | 'value'> { }

/**
 * Represents the default label options of the Sankey widget.
 * The value will be applied to all labels unless overridden by the `nodes` label prop of the Sankey data option.
 */
export interface SankeyLabelDefaults extends Omit<SankeyLabel, 'text'> { }

/**
 * Represents the default node options of the Sankey widget.
 * The value will be applied to all nodes unless overridden by the `nodes` prop of the Sankey data option.
 */
export interface SankeyNodeDefaults extends Omit<SankeyNode, 'id' | 'label'> { }

/**
 * Sankey options.
 */
export interface SankeyOptions {
    data: {
        links: SankeyLink[];
        nodes: SankeyNode[];
    };

    labels?: SankeyLabelDefaults;
    links?: SankeyLinkDefaults;
    nodes?: SankeyNodeDefaults;
}

export interface SankeyTheme {
    labels?: SankeyLabelDefaults;
    links?: SankeyLinkDefaults;
    nodes?: SankeyNodeDefaults;
    nodesColors: string[];
}

/**
 * Represents the Kendo Sankey widget.
 */
export class Sankey {
    constructor(element: Element, options: SankeyOptions, theme?: SankeyTheme);

    public setOptions(options: SankeyOptions): void;
    public bind(event: any, handlers: any): void;
    public unbind(event?: any, handlers?: any): void;
    public destroy(): void;
}

/**
 * Represents the Sankey widget event object.
 */
export interface SankeyEvent {
    /**
     * The Sankey widget instance.
     */
    sender: Sankey;
    /**
     * The native DOM event.
     */
    originalEvent: Event;
    /**
     * The event type.
     */
    type: string;
    /**
     * Prevents the default action.
     */
    preventDefault(): void;
    /**
     * Indicates whether the default action has been prevented.
     */
    isDefaultPrevented(): boolean;
}
