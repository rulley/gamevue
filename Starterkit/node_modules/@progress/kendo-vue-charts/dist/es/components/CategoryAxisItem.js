// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { Configuration } from './base/ConfigurationComponent';
import { getDefaultSlots } from '@progress/kendo-vue-common';
import { removeUndefinedProps } from '../utils/main';
/**
 * @hidden
 */
var ChartCategoryAxisItemVue2 = {
  name: 'KendoChartCategoryAxisItem',
  props: {
    autoBaseUnitSteps: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    axisCrossingValue: {
      type: [Object, Array, Date, Number],
      default: function _default() {
        return undefined;
      }
    },
    background: {
      type: String,
      default: function _default() {
        return undefined;
      }
    },
    baseUnit: {
      type: String,
      default: function _default() {
        return undefined;
      },
      validator: function validator(value) {
        return ['milliseconds', 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'years', 'auto', 'fit'].includes(value);
      }
    },
    baseUnitStep: {
      type: [Number, String],
      default: function _default() {
        return undefined;
      }
    },
    categories: {
      type: [Array, Object],
      default: function _default() {
        return undefined;
      }
    },
    color: {
      type: String,
      default: function _default() {
        return undefined;
      }
    },
    justified: {
      type: Boolean,
      default: function _default() {
        return undefined;
      }
    },
    line: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    majorGridLines: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    majorTicks: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    max: {
      type: [Number, Object, String, Date],
      default: function _default() {
        return undefined;
      }
    },
    maxDateGroups: {
      type: Number,
      default: function _default() {
        return undefined;
      }
    },
    maxDivisions: {
      type: Number,
      default: function _default() {
        return undefined;
      }
    },
    min: {
      type: [Number, Object, String, Date],
      default: function _default() {
        return undefined;
      }
    },
    minorGridLines: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    minorTicks: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    name: {
      type: String,
      default: undefined
    },
    rangeLabels: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    pane: {
      type: String,
      default: function _default() {
        return undefined;
      }
    },
    plotBands: {
      type: Array,
      default: function _default() {
        return undefined;
      }
    },
    reverse: {
      type: Boolean,
      default: function _default() {
        return undefined;
      }
    },
    roundToBaseUnit: {
      type: Boolean,
      default: function _default() {
        return undefined;
      }
    },
    startAngle: {
      type: Number,
      default: function _default() {
        return undefined;
      }
    },
    type: {
      type: String,
      default: function _default() {
        return undefined;
      },
      validator: function validator(value) {
        return ['category', 'date'].includes(value);
      }
    },
    visible: {
      type: Boolean,
      default: function _default() {
        return undefined;
      }
    },
    weekStartDay: {
      type: Number,
      default: function _default() {
        return undefined;
      }
    },
    crosshair: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    labels: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    notes: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    select: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    title: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlots = getDefaultSlots(this);
    var config = removeUndefinedProps(this.$props);
    return this.v3 ? h(Configuration, {
      config: config
    }, function () {
      return defaultSlots;
    }) : h(Configuration, {
      props: {
        config: config
      }
    }, [defaultSlots]);
  }
};
/**
 * @hidden
 */
var ChartCategoryAxisItem = ChartCategoryAxisItemVue2;
export { ChartCategoryAxisItem, ChartCategoryAxisItemVue2 };