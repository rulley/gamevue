// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
import { BaseChart } from './BaseChart.js';
import { StockChart as KendoStockChart } from '@progress/kendo-charts';
import { classNames, getDefaultSlots, getRef, setRef } from '@progress/kendo-vue-common';
var NAVIGATOR_DEFAULTS = {
  autoBindElements: true,
  liveDrag: false,
  partialRedraw: true
};
/**
 * @hidden
 */
var StockChartVue2 = {
  name: 'KendoStockChart',
  props: {
    partialRedraw: {
      type: Boolean,
      default: undefined
    },
    dir: String,
    renderAs: {
      type: String,
      default: undefined,
      validator: function validator(value) {
        return ['svg', 'canvas'].includes(value);
      }
    },
    pannable: {
      type: [Boolean, Object],
      default: function _default() {
        return undefined;
      }
    },
    zoomable: {
      type: [Boolean, Object],
      default: function _default() {
        return undefined;
      }
    },
    seriesColors: {
      type: Array,
      default: function _default() {
        return undefined;
      }
    },
    transitions: {
      type: Boolean,
      default: true
    },
    paneDefaults: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    panes: {
      type: Array,
      default: function _default() {
        return undefined;
      }
    },
    seriesDefaults: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    axisDefaults: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    }
  },
  updated: function updated() {
    this.baseChart = getRef(this, 'baseChart');
  },
  mounted: function mounted() {
    this.baseChart = getRef(this, 'baseChart');
  },
  methods: {
    chartInstance: function chartInstance() {
      if (this.baseChart !== null) {
        return this.baseChart.chartInstance;
      }
      return null;
    },
    surface: function surface() {
      if (this.baseChart !== null) {
        return this.baseChart.surface;
      }
      return null;
    },
    element: function element() {
      if (this.baseChart !== null) {
        return this.baseChart.element;
      }
      return null;
    },
    getTarget: function getTarget() {
      return this;
    },
    deriveOptionsFromParent: function deriveOptionsFromParent(options) {
      var navigator = Object.assign({}, options.navigator || {}, NAVIGATOR_DEFAULTS);
      return Object.assign({}, options, {
        navigator: navigator
      });
    },
    onRefresh: function onRefresh(chartOptions, themeOptions, chartInstance) {
      if (this.$props.partialRedraw) {
        chartInstance.applyOptions(chartOptions);
        chartInstance.bindCategories();
        chartInstance.navigator.redrawSlaves();
      } else {
        chartInstance.setOptions(chartOptions, themeOptions);
      }
    },
    handleBaseChartEvents: function handleBaseChartEvents(name, options) {
      this.$emit(name, options);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlots = getDefaultSlots(this);
    var _a = this.$props,
      partialRedraw = _a.partialRedraw,
      dir = _a.dir,
      renderAs = _a.renderAs,
      pannable = _a.pannable,
      zoomable = _a.zoomable,
      seriesColors = _a.seriesColors,
      transitions = _a.transitions,
      paneDefaults = _a.paneDefaults,
      panes = _a.panes,
      seriesDefaults = _a.seriesDefaults,
      axisDefaults = _a.axisDefaults;
    return (
      // @ts-ignore  function children
      h(BaseChart, {
        partialRedraw: partialRedraw,
        attrs: this.v3 ? undefined : {
          partialRedraw: partialRedraw,
          dir: dir,
          renderAs: renderAs,
          pannable: pannable,
          zoomable: zoomable,
          seriesColors: seriesColors,
          transitions: transitions,
          paneDefaults: paneDefaults,
          panes: panes,
          seriesDefaults: seriesDefaults,
          axisDefaults: axisDefaults,
          chartConstructor: KendoStockChart,
          getTarget: this.getTarget,
          wrapper: "div",
          deriveOptionsFromParent: this.deriveOptionsFromParent
        },
        dir: dir,
        renderAs: renderAs,
        pannable: pannable,
        zoomable: zoomable,
        seriesColors: seriesColors,
        transitions: transitions,
        paneDefaults: paneDefaults,
        panes: panes,
        seriesDefaults: seriesDefaults,
        axisDefaults: axisDefaults,
        ref: setRef(this, 'baseChart'),
        chartConstructor: KendoStockChart,
        getTarget: this.getTarget,
        wrapper: "div",
        deriveOptionsFromParent: this.deriveOptionsFromParent,
        onRefresh: this.onRefresh,
        on: this.v3 ? undefined : {
          "refresh": this.onRefresh,
          "basechartevent": this.handleBaseChartEvents
        },
        "class": classNames('k-stockchart k-widget'),
        onBasechartevent: this.handleBaseChartEvents
      }, this.v3 ? function () {
        return [defaultSlots];
      } : [defaultSlots])
    );
  }
};
/**
 * @hidden
 */
var StockChart = StockChartVue2;
export { StockChart, StockChartVue2 };