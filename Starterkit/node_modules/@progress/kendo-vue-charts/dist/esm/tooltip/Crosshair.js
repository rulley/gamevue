// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { classNames, getDefaultSlots } from '@progress/kendo-vue-common';
import { InstanceObserver } from '@progress/kendo-charts';
import { TooltipPopup } from './Popup.js';
var CROSSHAIR_TOOLTIP_CLASS = 'k-chart-crosshair-tooltip';
var INVERSE_TOOLTIP_CLASS = 'k-chart-tooltip-inverse';
/**
 * @hidden
 */
var CrosshairTooltipVue2 = {
  name: 'KendoCrosshairTooltip',
  props: {
    index: Number,
    name: String
  },
  data: function data() {
    return {
      popupShown: false,
      popupAlign: undefined,
      popupOffset: undefined,
      popupContent: undefined,
      popupStyles: undefined,
      className: undefined
    };
  },
  inject: {
    optionsState: {
      default: {}
    },
    dispatchOptions: {
      default: null
    },
    observersStore: {
      default: null
    },
    dispatchObservers: {
      default: null
    },
    childrenObserver: {
      default: null
    }
  },
  created: function created() {
    this.chartObserver = new InstanceObserver(this, {
      showTooltip: 'onShowTooltip',
      hideTooltip: 'onHideTooltip'
    });
    this.dispatchObservers({
      type: 'add',
      payload: this.chartObserver
    });
  },
  destroyed: !!isV3 ? undefined : function () {
    this.dispatchObservers({
      type: 'remove',
      payload: this.chartObserver
    });
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.dispatchObservers({
      type: 'remove',
      payload: this.chartObserver
    });
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var _a;
    var h = gh || createElement;
    var defaultSlots = getDefaultSlots(this);
    var tooltipContent = this.popupShown ? this.popupContent : Function.prototype;
    var popupContainerClassName = classNames((_a = {}, _a[CROSSHAIR_TOOLTIP_CLASS] = true, _a[INVERSE_TOOLTIP_CLASS] = !!this.className, _a));
    return (
      // @ts-ignore  function children
      h(TooltipPopup, {
        popupShown: this.popupShown,
        attrs: this.v3 ? undefined : {
          popupShown: this.popupShown,
          popupAlign: this.popupAlign,
          popupOffset: this.popupOffset,
          popupStyles: this.popupStyles,
          className: popupContainerClassName
        },
        popupAlign: this.popupAlign,
        popupOffset: this.popupOffset,
        popupStyles: this.popupStyles,
        className: popupContainerClassName
      }, this.v3 ? function () {
        return [tooltipContent];
      } : [tooltipContent])
    );
  },
  methods: {
    onShowTooltip: function onShowTooltip(e) {
      var anchor = e.anchor,
        style = e.style,
        className = e.className,
        crosshair = e.crosshair,
        axisName = e.axisName,
        axisIndex = e.axisIndex,
        value = e.value;
      var _a = this.$props,
        name = _a.name,
        index = _a.index;
      if (!crosshair) {
        return;
      }
      if (axisName === name && axisIndex === index) {
        this.popupShown = true;
        this.popupAlign = anchor.align;
        this.popupOffset = anchor.point;
        this.popupContent = value;
        this.popupStyles = style;
        this.className = className;
      }
    },
    onHideTooltip: function onHideTooltip() {
      this.popupShown = false;
      this.popupStyles = {};
      this.className = undefined;
    }
  }
};
/**
 * @hidden
 */
var CrosshairTooltip = CrosshairTooltipVue2;
export { CrosshairTooltip, CrosshairTooltipVue2 };