"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IntlProviderVue2 = exports.IntlProvider = void 0;
// @ts-ignore
var aVue = require("vue");
var allVue = aVue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var provide = allVue.provide;
var IntlService_1 = require("./IntlService");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var package_metadata_1 = require("../package-metadata");
/**
 * @hidden
 */
var IntlProviderVue2 = {
  props: {
    locale: String
  },
  data: function data() {
    return this.getChildContext();
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function (props) {
    var v3 = !!isV3;
    var intlService = ref(new IntlService_1.IntlService(props.locale));
    provide('kendoIntlService', intlService);
    return {
      v3: v3
    };
  },
  watch: {
    locale: function locale(newLocale) {
      this.$data.kendoIntlService.locale = newLocale;
    }
  },
  provide: function provide() {
    return {
      kendoIntlService: this.$data.kendoIntlService
    };
  },
  methods: {
    /**
     * Returns an internationalization service.
     * The method is suitable for overriding when you
     * implement custom internationalization behavior.
     */
    getIntlService: function getIntlService() {
      return new IntlService_1.IntlService(this.$props.locale);
    },
    /**
     * @hidden
     */
    getChildContext: function getChildContext() {
      return {
        kendoIntlService: this.getIntlService()
      };
    }
  },
  created: function created() {
    (0, kendo_vue_common_1.validatePackage)(package_metadata_1.packageMetadata);
  },
  /**
   * @hidden
   */
  // @ts-ignore
  render: function render(createElement) {
    // @ts-ignore
    var h = gh || createElement;
    var defaultSlot = (0, kendo_vue_common_1.getDefaultSlots)(this);
    return h("div", [defaultSlot]);
  }
};
exports.IntlProviderVue2 = IntlProviderVue2;
/**
 *
 * A Vue component which provides an internationalization service. Expects a locale string as a property of the component.
 *
 *
 * ### props
 * The props of the IntlProvider component.
 *
 *
 *
 * ## Methods
 *
 * ### getIntlService
 * Returns an internationalization service. The method is suitable for overriding when you implement custom internationalization behavior.
 *
 * #### Returns
 * <span class='code'>[IntlService]({% slug api_intl_intlservice %})</span>
 */
var IntlProvider = IntlProviderVue2;
exports.IntlProvider = IntlProvider;