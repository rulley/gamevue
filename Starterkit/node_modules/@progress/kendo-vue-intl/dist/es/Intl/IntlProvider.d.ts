import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
declare type DefaultData<V> = object | ((this: V) => IntlProviderData);
import { IntlProviderProps } from './IntlProviderProps';
/**
 * @hidden
 */
export interface IntlProviderMethods {
    [key: string]: any;
    getIntlService: () => void;
    getChildContext: () => void;
}
/**
 * @hidden
 */
export interface IntlProviderData {
    kendoIntlService: any;
}
/**
 * @hidden
 */
export interface IntlProviderAllMethods extends Vue2type, IntlProviderMethods {
}
/**
 * @hidden
 */
declare let IntlProviderVue2: ComponentOptions<IntlProviderAllMethods, DefaultData<IntlProviderData>, DefaultMethods<IntlProviderAllMethods>, {}, RecordPropsDefinition<IntlProviderProps>>;
/**
 *
 * A Vue component which provides an internationalization service. Expects a locale string as a property of the component.
 *
 *
 * ### props
 * The props of the IntlProvider component.
 *
 *
 *
 * ## Methods
 *
 * ### getIntlService
 * Returns an internationalization service. The method is suitable for overriding when you implement custom internationalization behavior.
 *
 * #### Returns
 * <span class='code'>[IntlService]({% slug api_intl_intlservice %})</span>
 */
declare const IntlProvider: DefineComponent<IntlProviderProps, any, IntlProviderData, {}, IntlProviderMethods, {}, {}, {}, string, IntlProviderProps, IntlProviderProps, {}>;
export { IntlProvider, IntlProviderVue2 };
