"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeUndefinedProps = exports.toggle = exports.validateChildren = exports.hasParent = void 0;
/**
 * @hidden
 */
function hasParent(element, parent) {
    var current = element;
    while (current && current !== parent) {
        current = current.parentNode;
    }
    return current ? true : false;
}
exports.hasParent = hasParent;
/**
 * @hidden
 */
function removeUndefinedProps(obj) {
    var clonedObject = __assign({}, obj);
    Object.keys(clonedObject).forEach(function (key) {
        if (clonedObject[key] === undefined) {
            delete clonedObject[key];
        }
        if (key === 'dataItems') {
            clonedObject.data = clonedObject[key];
            delete clonedObject[key];
        }
        if (key === 'lineStyle' && clonedObject[key]) {
            clonedObject.style = clonedObject[key];
            delete clonedObject[key];
        }
    });
    return clonedObject;
}
exports.removeUndefinedProps = removeUndefinedProps;
/**
 * @hidden
 */
function validateChildren(props, propName, componentName, childType) {
    var prop = props[propName];
    if (prop) {
        if (Array.isArray(prop)) {
            for (var _i = 0, prop_1 = prop; _i < prop_1.length; _i++) {
                var value = prop_1[_i];
                if (!value.type || value.type !== childType) {
                    return new Error("".concat(componentName, " children should be Array of type ").concat(childType.displayName, "."));
                }
            }
        }
    }
    return null;
}
exports.validateChildren = validateChildren;
/**
 * @hidden
 */
var toggle = function (flag) { return flag === undefined ? false : !flag; };
exports.toggle = toggle;
