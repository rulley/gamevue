import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
/**
 * @hidden
 */
export interface ConfigurationComponentProps {
    chartKey?: string;
    chartCollectionIdxKey?: string;
    parentStore?: any;
    [x: string]: any;
}
/**
 * @hidden
 */
interface ConfigurationState {
    optionsStore: any;
    childStore: any;
}
/**
 * @hidden
 */
interface ConfigurationData {
}
/**
 * @hidden
 */
export interface ConfigurationMethods {
    [key: string]: any;
    dispatch: () => void;
    onDestroyed: () => void;
}
/**
 * @hidden
 */
export interface ConfigurationComputed {
    [key: string]: any;
    wrapperClass: object;
}
/**
 * @hidden
 */
export interface ConfigurationAll extends ConfigurationMethods, ConfigurationState, ConfigurationData, ConfigurationComputed, Vue2type {
}
/**
 * @hidden
 */
declare const ConfigurationVue2: ComponentOptions<Vue2type, DefaultData<ConfigurationData>, DefaultMethods<ConfigurationAll>, ConfigurationComputed, RecordPropsDefinition<ConfigurationComponentProps>>;
/**
 * @hidden
 */
declare const Configuration: DefineComponent<ConfigurationComponentProps, any, ConfigurationData, ConfigurationComputed, ConfigurationMethods, {}, {}, {}, string, ConfigurationComponentProps, ConfigurationComponentProps, {}>;
export { Configuration, ConfigurationVue2 };
