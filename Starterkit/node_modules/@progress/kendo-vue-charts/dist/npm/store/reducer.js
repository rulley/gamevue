"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.observersReducer = exports.themeReducer = exports.optionsReducer = void 0;
/**
 * @hidden
 */
var optionsReducer = function (currentState, action) {
    if (action.chartCollectionIdxKey) {
        return reducers.collectionConfigurationItem(currentState, action);
    }
    else if (action.chartKey) {
        return reducers.configurationItem(currentState, action);
    }
    else {
        return {};
    }
};
exports.optionsReducer = optionsReducer;
/**
 * @hidden
 */
var themeReducer = function (currentState, action) {
    if (action.type) {
        switch (action.type) {
            case 'set':
                return reducers.themeItem(currentState, action);
            case 'push':
                return Object.assign(currentState, action.payload);
            default:
                return currentState;
        }
    }
    else {
        return {};
    }
};
exports.themeReducer = themeReducer;
/**
 * @hidden
 */
var observersReducer = function (currentState, action) {
    if (action.type) {
        switch (action.type) {
            case 'add':
                return __spreadArray(__spreadArray([], currentState, true), [action.payload], false);
            case 'remove':
                return currentState.filter(function (element) { return element !== action.payload; });
            default:
                return currentState;
        }
    }
    else {
        return [];
    }
};
exports.observersReducer = observersReducer;
/**
 * @hidden
 */
var reducers = {
    configurationItem: function (currentState, action) {
        var _a, _b;
        if (currentState[action.chartKey] && Object.keys(currentState[action.chartKey]).length) {
            return Object.assign(currentState, (_a = {},
                _a[action.chartKey] = __assign(__assign({}, currentState[action.chartKey]), action.payload),
                _a));
        }
        return Object.assign(currentState, (_b = {},
            _b[action.chartKey] = action.payload,
            _b));
    },
    collectionConfigurationItem: function (currentState, action) {
        var _a, _b, _c;
        var inCollection = false;
        var _d = action.chartCollectionIdxKey.split('_'), collectionName = _d[0], collectionIdx = _d[1];
        var currentCollection = action.parentKey ?
            currentState[action.parentKey] ? (currentState[action.parentKey][collectionName] || []) : []
            : (currentState[collectionName] || []);
        var collection = currentCollection.map(function (item, index) {
            if (parseInt(collectionIdx, 10) === index ||
                (action.payload && action.payload.uid === item.uid)) {
                inCollection = true;
                return action.payload;
            }
            return item;
        });
        if (inCollection === false && !action.uid) {
            collection.splice(parseInt(collectionIdx, 10), 0, action.payload);
        }
        if (action.uid) {
            var index = collection.findIndex(function (i) { return i.uid === action.uid; });
            if (index > -1) {
                collection.splice(index, 1);
            }
        }
        if (action.parentKey) {
            return Object.assign(currentState, (_a = {},
                _a[action.parentKey] = (_b = {},
                    _b[collectionName] = collection,
                    _b),
                _a));
        }
        return Object.assign(currentState, (_c = {},
            _c[collectionName] = collection,
            _c));
    },
    themeItem: function (currentState, action) {
        var store = {};
        var nextStore = Object.assign(store, currentState);
        var _a = action.payload, field = _a.field, value = _a.value;
        var parts = field.split('.');
        var key = parts.shift();
        while (parts.length > 0) {
            store = store[key] = store[key] || {};
            key = parts.shift();
        }
        store[key] = value;
        return nextStore;
    }
};
