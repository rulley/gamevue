import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from './additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { SparklineProps } from './SparklineProps';
import { BaseChartState } from './BaseChart';
/**
 * @hidden
 */
interface SparklineState {
    baseChartRef: any;
    baseChart: BaseChartState | null;
}
/**
 * @hidden
 */
interface SparklineData {
}
/**
 * @hidden
 */
export interface SparklineMethods {
    [key: string]: any;
    chartInstance: () => any;
}
/**
 * @hidden
 */
export interface SparklineComputed {
    [key: string]: any;
    wrapperClass: object;
}
/**
 * @hidden
 */
export interface SparklineAll extends SparklineMethods, SparklineState, SparklineData, SparklineComputed, Vue2type {
}
/**
 * @hidden
 */
declare const SparklineVue2: ComponentOptions<Vue2type, DefaultData<SparklineData>, DefaultMethods<SparklineAll>, SparklineComputed, RecordPropsDefinition<SparklineProps>>;
/**
 * @hidden
 */
declare const Sparkline: DefineComponent<SparklineProps, any, SparklineData, SparklineComputed, SparklineMethods, {}, {}, {}, string, SparklineProps, SparklineProps, {}>;
export { Sparkline, SparklineVue2 };
