// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { InstanceObserver } from '@progress/kendo-charts';
import { hasParent } from '../utils/main';
import { Popup } from '@progress/kendo-vue-popup';
import { getDefaultSlots, getRef, setRef } from '@progress/kendo-vue-common';
var COLLISION = {
  horizontal: 'fit',
  vertical: 'fit'
};
var TOOLTIP_CLASS = 'k-chart-tooltip';
var POPUP_WRAPPER_CLASS = 'k-chart-tooltip-wrapper';
/**
 * @hidden
 */
var TooltipPopupVue2 = {
  name: 'KendoTooltipPopup',
  props: {
    className: String,
    popupShown: Boolean,
    popupAlign: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    popupOffset: {
      type: Object
    },
    popupStyles: {
      type: Object
    },
    popupContent: Function
  },
  inject: {
    options: {
      default: {
        state: {}
      }
    },
    dispatchOptions: {
      default: null
    },
    observersState: {
      default: null
    },
    dispatchObservers: {
      default: null
    },
    childrenObserver: {
      default: null
    }
  },
  created: function created() {
    this.chartObserver = new InstanceObserver(this, {
      onMouseLeave: 'onChartMouseLeave'
    });
    this.dispatchObservers({
      type: 'add',
      payload: this.chartObserver
    });
  },
  mounted: function mounted() {
    this.element = getRef(this, 'element');
  },
  destroyed: !!isV3 ? undefined : function () {
    this.dispatchObservers({
      type: 'remove',
      payload: this.chartObserver
    });
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.dispatchObservers({
      type: 'remove',
      payload: this.chartObserver
    });
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var _this = this;
    var h = gh || createElement;
    var defaultSlots = getDefaultSlots(this);
    var _a = this.$props,
      popupShown = _a.popupShown,
      popupAlign = _a.popupAlign,
      popupOffset = _a.popupOffset,
      popupStyles = _a.popupStyles,
      popupContent = _a.popupContent,
      className = _a.className;
    var wrapperClass = [TOOLTIP_CLASS, className].join(' ').trim();
    return (
      // @ts-ignore  function children
      h(Popup, {
        animate: false,
        attrs: this.v3 ? undefined : {
          animate: false,
          popupAlign: popupAlign,
          offset: popupOffset,
          show: popupShown,
          collision: COLLISION
        },
        popupAlign: popupAlign,
        offset: popupOffset,
        show: popupShown,
        collision: COLLISION,
        "class": POPUP_WRAPPER_CLASS
      }, this.v3 ? function () {
        return [h("div", {
          "class": wrapperClass,
          style: popupStyles,
          onMouseleave: _this.onMouseLeave,
          on: _this.v3 ? undefined : {
            "mouseleave": _this.onMouseLeave
          },
          ref: setRef(_this, 'element')
        }, [defaultSlots])];
      } : [h("div", {
        "class": wrapperClass,
        style: popupStyles,
        onMouseleave: _this.onMouseLeave,
        on: _this.v3 ? undefined : {
          "mouseleave": _this.onMouseLeave
        },
        ref: setRef(_this, 'element')
      }, [defaultSlots])])
    );
  },
  methods: {
    onChartMouseLeave: function onChartMouseLeave(e) {
      var event = e.event;
      if (hasParent(event.relatedTarget, this.element)) {
        /* prevent default behavior so that the tooltip won't be hidden */
        return true;
      }
      return false;
    },
    onMouseLeave: function onMouseLeave(_e) {
      //   const domEvent = toDomEvent(this, e);
      //   const isDefaultPrevented = this.context.childrenObserver.trigger('onMouseLeave', domEvent);
      // if (isDefaultPrevented) {
      //     e.preventDefault();
      // }
    }
  }
};
/**
 * @hidden
 */
var TooltipPopup = TooltipPopupVue2;
export { TooltipPopup, TooltipPopupVue2 };