{"ast":null,"code":"import _objectSpread from \"/Users/michaelrellaford/Documents/velgame/Starterkit/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n// Register each file as a corresponding Vuex module. Module nesting\n// will mirror [sub-]directory hierarchy and modules are namespaced\n// as the camelCase equivalent of their file name.\n\nimport camelCase from 'lodash/camelCase';\nvar modulesCache = {};\nvar storeData = {\n  modules: {}\n};\n(function updateModules() {\n  // Allow us to dynamically require all Vuex module files.\n  // https://webpack.js.org/guides/dependency-management/#require-context\n  var requireModule = require.context(\n  // Search for files in the current directory.\n  '.',\n  // Search for files in subdirectories.\n  true,\n  // Include any .js files that are not this file or a unit test.\n  /^((?!index|\\.unit\\.).)*\\.js$/);\n\n  // For every Vuex module...\n  requireModule.keys().forEach(function (fileName) {\n    var moduleDefinition = requireModule(fileName);\n\n    // Skip the module during hot reload if it refers to the\n    // same module definition as the one we have cached.\n    if (modulesCache[fileName] === moduleDefinition) return;\n\n    // Update the module cache, for efficient hot reloading.\n    modulesCache[fileName] = moduleDefinition;\n\n    // Get the module path as an array.\n    var modulePath = fileName\n    // Remove the \"./\" from the beginning.\n    .replace(/^\\.\\//, '')\n    // Remove the file extension from the end.\n    .replace(/\\.\\w+$/, '')\n    // Split nested modules into an array path.\n    .split(/\\//)\n    // camelCase all module namespaces and names.\n    .map(camelCase);\n\n    // Get the modules object for the current path.\n    var _getNamespace = getNamespace(storeData, modulePath),\n      modules = _getNamespace.modules;\n\n    // Add the module to our modules object.\n    modules[modulePath.pop()] = _objectSpread({\n      // Modules are namespaced by default.\n      namespaced: true\n    }, moduleDefinition);\n  });\n\n  // If the environment supports hot reloading...\n  if (module.hot) {\n    // Whenever any Vuex module is updated...\n    module.hot.accept(requireModule.id, function () {\n      // Update `storeData.modules` with the latest definitions.\n      updateModules();\n      // Trigger a hot update in the store.\n      require('../store').default.hotUpdate({\n        modules: storeData.modules\n      });\n    });\n  }\n})();\n\n// Recursively get the namespace of a Vuex module, even if nested.\nfunction getNamespace(subtree, path) {\n  if (path.length === 1) return subtree;\n  var namespace = path.shift();\n  subtree.modules[namespace] = _objectSpread({\n    modules: {},\n    namespaced: true\n  }, subtree.modules[namespace]);\n  return getNamespace(subtree.modules[namespace], path);\n}\nexport default storeData.modules;","map":{"version":3,"names":["camelCase","modulesCache","storeData","modules","updateModules","requireModule","require","context","keys","forEach","fileName","moduleDefinition","modulePath","replace","split","map","_getNamespace","getNamespace","pop","_objectSpread","namespaced","module","hot","accept","id","default","hotUpdate","subtree","path","length","namespace","shift"],"sources":["/Users/michaelrellaford/Documents/velgame/Starterkit/src/state/modules/index.js"],"sourcesContent":["// Register each file as a corresponding Vuex module. Module nesting\n// will mirror [sub-]directory hierarchy and modules are namespaced\n// as the camelCase equivalent of their file name.\n\nimport camelCase from 'lodash/camelCase'\n\nconst modulesCache = {}\nconst storeData = { modules: {} }\n\n;(function updateModules() {\n  // Allow us to dynamically require all Vuex module files.\n  // https://webpack.js.org/guides/dependency-management/#require-context\n  const requireModule = require.context(\n    // Search for files in the current directory.\n    '.',\n    // Search for files in subdirectories.\n    true,\n    // Include any .js files that are not this file or a unit test.\n    /^((?!index|\\.unit\\.).)*\\.js$/\n  )\n\n  // For every Vuex module...\n  requireModule.keys().forEach((fileName) => {\n    const moduleDefinition = requireModule(fileName)\n\n    // Skip the module during hot reload if it refers to the\n    // same module definition as the one we have cached.\n    if (modulesCache[fileName] === moduleDefinition) return\n\n    // Update the module cache, for efficient hot reloading.\n    modulesCache[fileName] = moduleDefinition\n\n    // Get the module path as an array.\n    const modulePath = fileName\n      // Remove the \"./\" from the beginning.\n      .replace(/^\\.\\//, '')\n      // Remove the file extension from the end.\n      .replace(/\\.\\w+$/, '')\n      // Split nested modules into an array path.\n      .split(/\\//)\n      // camelCase all module namespaces and names.\n      .map(camelCase)\n\n    // Get the modules object for the current path.\n    const { modules } = getNamespace(storeData, modulePath)\n\n    // Add the module to our modules object.\n    modules[modulePath.pop()] = {\n      // Modules are namespaced by default.\n      namespaced: true,\n      ...moduleDefinition,\n    }\n  })\n\n  // If the environment supports hot reloading...\n  if (module.hot) {\n    // Whenever any Vuex module is updated...\n    module.hot.accept(requireModule.id, () => {\n      // Update `storeData.modules` with the latest definitions.\n      updateModules()\n      // Trigger a hot update in the store.\n      require('../store').default.hotUpdate({ modules: storeData.modules })\n    })\n  }\n})()\n\n// Recursively get the namespace of a Vuex module, even if nested.\nfunction getNamespace(subtree, path) {\n  if (path.length === 1) return subtree\n\n  const namespace = path.shift()\n  subtree.modules[namespace] = {\n    modules: {},\n    namespaced: true,\n    ...subtree.modules[namespace],\n  }\n  return getNamespace(subtree.modules[namespace], path)\n}\n\nexport default storeData.modules\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;;AAEA,OAAOA,SAAS,MAAM,kBAAkB;AAExC,IAAMC,YAAY,GAAG,CAAC,CAAC;AACvB,IAAMC,SAAS,GAAG;EAAEC,OAAO,EAAE,CAAC;AAAE,CAAC;AAEhC,CAAC,SAASC,aAAaA,CAAA,EAAG;EACzB;EACA;EACA,IAAMC,aAAa,GAAGC,OAAO,CAACC,OAAO;EACnC;EACA,GAAG;EACH;EACA,IAAI;EACJ;EACA,8BACF,CAAC;;EAED;EACAF,aAAa,CAACG,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,UAACC,QAAQ,EAAK;IACzC,IAAMC,gBAAgB,GAAGN,aAAa,CAACK,QAAQ,CAAC;;IAEhD;IACA;IACA,IAAIT,YAAY,CAACS,QAAQ,CAAC,KAAKC,gBAAgB,EAAE;;IAEjD;IACAV,YAAY,CAACS,QAAQ,CAAC,GAAGC,gBAAgB;;IAEzC;IACA,IAAMC,UAAU,GAAGF;IACjB;IAAA,CACCG,OAAO,CAAC,OAAO,EAAE,EAAE;IACpB;IAAA,CACCA,OAAO,CAAC,QAAQ,EAAE,EAAE;IACrB;IAAA,CACCC,KAAK,CAAC,IAAI;IACX;IAAA,CACCC,GAAG,CAACf,SAAS,CAAC;;IAEjB;IACA,IAAAgB,aAAA,GAAoBC,YAAY,CAACf,SAAS,EAAEU,UAAU,CAAC;MAA/CT,OAAO,GAAAa,aAAA,CAAPb,OAAO;;IAEf;IACAA,OAAO,CAACS,UAAU,CAACM,GAAG,CAAC,CAAC,CAAC,GAAAC,aAAA;MACvB;MACAC,UAAU,EAAE;IAAI,GACbT,gBAAgB,CACpB;EACH,CAAC,CAAC;;EAEF;EACA,IAAIU,MAAM,CAACC,GAAG,EAAE;IACd;IACAD,MAAM,CAACC,GAAG,CAACC,MAAM,CAAClB,aAAa,CAACmB,EAAE,EAAE,YAAM;MACxC;MACApB,aAAa,CAAC,CAAC;MACf;MACAE,OAAO,CAAC,UAAU,CAAC,CAACmB,OAAO,CAACC,SAAS,CAAC;QAAEvB,OAAO,EAAED,SAAS,CAACC;MAAQ,CAAC,CAAC;IACvE,CAAC,CAAC;EACJ;AACF,CAAC,EAAE,CAAC;;AAEJ;AACA,SAASc,YAAYA,CAACU,OAAO,EAAEC,IAAI,EAAE;EACnC,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE,OAAOF,OAAO;EAErC,IAAMG,SAAS,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC;EAC9BJ,OAAO,CAACxB,OAAO,CAAC2B,SAAS,CAAC,GAAAX,aAAA;IACxBhB,OAAO,EAAE,CAAC,CAAC;IACXiB,UAAU,EAAE;EAAI,GACbO,OAAO,CAACxB,OAAO,CAAC2B,SAAS,CAAC,CAC9B;EACD,OAAOb,YAAY,CAACU,OAAO,CAACxB,OAAO,CAAC2B,SAAS,CAAC,EAAEF,IAAI,CAAC;AACvD;AAEA,eAAe1B,SAAS,CAACC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}