// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var reactive = allVue.reactive;
import { Configuration } from './base/ConfigurationComponent.js';
import { getDefaultSlots, noop } from '@progress/kendo-vue-common';
import { removeUndefinedProps } from '../utils/main.js';
/**
 * @hidden
 */
var ChartSeriesItemVue2 = {
  name: 'KendoChartSeriesItem',
  props: {
    autoFit: Boolean,
    aggregate: {
      type: [String, Function, Object],
      default: function _default() {
        return undefined;
      }
    },
    axis: String,
    border: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    categoryAxis: String,
    categoryField: String,
    closeField: String,
    color: {
      type: [String, Function],
      default: function _default() {
        return undefined;
      }
    },
    colorField: String,
    connectors: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    currentField: String,
    dashType: {
      type: String,
      default: function _default() {
        return undefined;
      },
      validator: function validator(value) {
        return ['dash', 'dashDot', 'dot', 'longDash', 'longDashDot', 'longDashDotDot', 'solid'].includes(value);
      }
    },
    dataItems: {
      type: Array,
      default: function _default() {
        return undefined;
      }
    },
    downColor: String,
    downColorField: String,
    dynamicHeight: {
      type: Boolean,
      default: undefined
    },
    dynamicSlope: {
      type: Boolean,
      default: undefined
    },
    errorHighField: String,
    errorLowField: String,
    explodeField: String,
    field: String,
    for: String,
    fromField: String,
    gap: Number,
    highField: String,
    holeSize: Number,
    line: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    lowField: String,
    lowerField: String,
    margin: {
      type: [Object, Number],
      default: function _default() {
        return undefined;
      }
    },
    maxSize: Number,
    meanField: String,
    medianField: String,
    minSize: Number,
    missingValues: {
      type: String,
      default: function _default() {
        return undefined;
      },
      validator: function validator(value) {
        return ['gap', 'interpolate', 'zero'].includes(value);
      }
    },
    name: String,
    neckRatio: Number,
    negativeColor: String,
    negativeValues: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    noteTextField: String,
    opacity: Number,
    openField: String,
    outliersField: String,
    overlay: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    padding: Number,
    q1Field: String,
    q3Field: String,
    segmentSpacing: Number,
    size: Number,
    sizeField: String,
    spacing: Number,
    stack: {
      type: [Boolean, String, Object],
      default: function _default() {
        return undefined;
      }
    },
    startAngle: Number,
    lineStyle: {
      type: String,
      default: function _default() {
        return undefined;
      },
      validator: function validator(value) {
        return ['normal', 'step', 'smooth'].includes(value);
      }
    },
    summaryField: String,
    target: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    toField: String,
    type: {
      type: String,
      default: function _default() {
        return undefined;
      },
      validator: function validator(value) {
        return ['area', 'bar', 'boxPlot', 'bubble', 'bullet', 'candlestick', 'column', 'donut', 'funnel', 'pyramid', 'linearTrendline', 'movingAverageTrendline', 'horizontalWaterfall', 'line', 'ohlc', 'pie', 'polarArea', 'polarLine', 'polarScatter', 'radarArea', 'radarColumn', 'radarLine', 'rangeArea', 'rangeBar', 'rangeColumn', 'scatter', 'scatterLine', 'verticalArea', 'verticalBoxPlot', 'verticalBullet', 'verticalLine', 'verticalRangeArea', 'waterfall'].includes(value);
      }
    },
    upperField: String,
    visible: {
      type: Boolean,
      default: undefined
    },
    visibleInLegend: {
      type: Boolean,
      default: undefined
    },
    visibleInLegendField: String,
    visual: {
      type: Function,
      default: undefined
    },
    width: Number,
    xAxis: String,
    xErrorHighField: String,
    xErrorLowField: String,
    xField: String,
    yAxis: String,
    yErrorHighField: String,
    yErrorLowField: String,
    yField: String,
    zIndex: Number,
    errorBars: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    extremes: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    highlight: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    /**
     * The configuration of the Chart series label. The Chart displays the series labels when the [`series.labels.visible`]({% slug api_charts_chartserieslabelsprops %}#toc-visible) option is set to `true`.
     */
    labels: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    markers: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    legendItem: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    notes: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    outliers: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    tooltip: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    }
  },
  inject: {
    chartRefresh: {
      default: noop
    }
  },
  watch: {
    dataItems: {
      handler: function handler() {
        this.chartRefresh();
      },
      deep: true
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlots = getDefaultSlots(this);
    var config = removeUndefinedProps(this.$props);
    return this.v3 ? h(Configuration, {
      config: config
    }, function () {
      return defaultSlots;
    }) : h(Configuration, {
      props: {
        config: config
      }
    }, [defaultSlots]);
  }
};
/**
 * @hidden
 */
var ChartSeriesItem = ChartSeriesItemVue2;
export { ChartSeriesItem, ChartSeriesItemVue2 };