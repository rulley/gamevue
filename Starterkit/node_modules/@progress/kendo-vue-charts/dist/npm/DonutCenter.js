"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DonutCenterVue2 = exports.DonutCenter = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var kendo_charts_1 = require("@progress/kendo-charts");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */
var DonutCenterVue2 = {
  name: 'KendoDonutCenter',
  props: {
    render: [String, Function, Object]
  },
  data: function data() {
    return {
      donutCenterStyles: null
    };
  },
  inject: {
    optionsState: {
      default: {}
    },
    dispatchOptions: {
      default: null
    },
    dispatchObservers: {
      default: null
    },
    childrenObserver: {
      default: null
    }
  },
  created: function created() {
    this.dispatchObservers({
      type: 'add',
      payload: new kendo_charts_1.InstanceObserver(this, {
        render: 'onRender'
      })
    });
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var render = this.$props.render;
    var renderer = h("span");
    var centerElement = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: render,
      defaultRendering: null
    });
    if (render && this.donutCenterStyles) {
      renderer = h("div", {
        "class": "k-chart-donut-center",
        style: this.donutCenterStyles
      }, [centerElement]);
    }
    return renderer;
  },
  methods: {
    onRender: function onRender(event) {
      var series = this.optionsState.series;
      var firstSeries = Array.isArray(series) ? series[0] : null;
      var charts = event.sender._plotArea.charts;
      if (!firstSeries || firstSeries.type !== 'donut' || charts[0].points.length === 0) {
        return;
      }
      var sector = charts[0].points[0].sector;
      var radius = sector.innerRadius;
      var top = sector.center.y - radius;
      var left = sector.center.x - radius;
      var size = radius * 2;
      this.donutCenterStyles = {
        height: size + 'px',
        left: left + 'px',
        top: top + 'px',
        width: size + 'px'
      };
    }
  }
};
exports.DonutCenterVue2 = DonutCenterVue2;
/**
 * @hidden
 */
var DonutCenter = DonutCenterVue2;
exports.DonutCenter = DonutCenter;