import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
declare type DefaultData<V> = object | ((this: V) => LocalizationProviderData);
import { LocalizationProviderProps } from './LocalizationProviderProps';
/**
 * @hidden
 */
export interface LocalizationProviderMethods {
    [key: string]: any;
    getLocalizationService: () => void;
    getChildContext: () => void;
}
/**
 * @hidden
 */
export interface LocalizationProviderData {
}
/**
 * @hidden
 */
export interface LocalizationProviderAllMethods extends Vue2type, LocalizationProviderMethods {
}
/**
 * @hidden
 */
declare let LocalizationProviderVue2: ComponentOptions<LocalizationProviderAllMethods, DefaultData<LocalizationProviderData>, DefaultMethods<LocalizationProviderAllMethods>, {}, RecordPropsDefinition<LocalizationProviderProps>>;
/**
 *
 *
 * A Vue component which provides a localization service. Expects a language string as a property of the component.
 *
 *
 * ### props
 * The props of the LocalizationProvider component.
 *
 *
 *
 * ## Methods
 *
 * ### getLocalizationService
 * Returns a localization service. The method is suitable for overriding when you implement custom localization behavior.
 *
 * #### Returns
 * <span class='code'>[LocalizationService]({% slug api_intl_localizationservice %})</span>
 */
declare const LocalizationProvider: DefineComponent<LocalizationProviderProps, any, LocalizationProviderData, {}, LocalizationProviderMethods, {}, {}, {}, string, LocalizationProviderProps, LocalizationProviderProps, {}>;
export { LocalizationProvider, LocalizationProviderVue2 };
