"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChartYAxisItemVue2 = exports.ChartYAxisItem = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ConfigurationComponent_1 = require("./base/ConfigurationComponent");
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
var main_1 = require("../utils/main");
/**
 * @hidden
 */
var ChartYAxisItemVue2 = {
  name: 'KendoChartYAxisItem',
  props: {
    axisCrossingValue: {
      type: [Array, Object, Date, Number],
      default: function _default() {
        return undefined;
      }
    },
    background: {
      type: String,
      default: undefined
    },
    baseUnit: {
      type: String,
      default: function _default() {
        return undefined;
      },
      validator: function validator(value) {
        return ['milliseconds', 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'years', 'auto', 'fit'].includes(value);
      }
    },
    color: {
      type: String,
      default: undefined
    },
    line: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    majorGridLines: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    majorTicks: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    majorUnit: {
      type: Number,
      default: undefined
    },
    max: {
      type: [Number, Object, String, Date],
      default: function _default() {
        return undefined;
      }
    },
    min: {
      type: [Number, Object, String, Date],
      default: function _default() {
        return undefined;
      }
    },
    minorGridLines: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    minorTicks: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    minorUnit: {
      type: Number,
      default: undefined
    },
    name: {
      type: String,
      default: undefined
    },
    narrowRange: {
      type: Boolean,
      default: function _default() {
        return undefined;
      }
    },
    pane: {
      type: String,
      default: undefined
    },
    plotBands: {
      type: Array,
      default: function _default() {
        return undefined;
      }
    },
    reverse: {
      type: Boolean,
      default: function _default() {
        return undefined;
      }
    },
    type: {
      type: String,
      default: function _default() {
        return undefined;
      },
      validator: function validator(value) {
        return ['numeric', 'log', 'date'].includes(value);
      }
    },
    visible: {
      type: Boolean,
      default: function _default() {
        return undefined;
      }
    },
    crosshair: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    labels: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    notes: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    },
    title: {
      type: Object,
      default: function _default() {
        return undefined;
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlots = (0, kendo_vue_common_1.getDefaultSlots)(this);
    var config = (0, main_1.removeUndefinedProps)(this.$props);
    return this.v3 ? h(ConfigurationComponent_1.Configuration, {
      config: config
    }, function () {
      return defaultSlots;
    }) : h(ConfigurationComponent_1.Configuration, {
      props: {
        config: config
      }
    }, [defaultSlots]);
  }
};
exports.ChartYAxisItemVue2 = ChartYAxisItemVue2;
/**
 * @hidden
 */
var ChartYAxisItem = ChartYAxisItemVue2;
exports.ChartYAxisItem = ChartYAxisItem;