"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConfigurationVue2 = exports.Configuration = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */
var ConfigurationVue2 = {
  name: 'KendoConfiguration',
  props: {
    chartKey: String,
    config: {
      type: Object,
      default: function _default() {
        return {};
      }
    }
  },
  data: function data() {
    return {
      childState: {},
      index: null
    };
  },
  provide: function provide() {
    return {
      addChild: this.addChildOption,
      removeChild: this.removeChildOption,
      childOption: true
    };
  },
  inject: {
    childOption: {
      default: null
    },
    addChild: {
      default: kendo_vue_common_1.noop
    },
    removeChild: {
      default: kendo_vue_common_1.noop
    },
    child: {
      default: {}
    },
    parentKey: {
      default: null
    },
    chartCollection: {
      default: null
    },
    dispatchOptions: {
      default: null
    },
    childrenObserver: {
      default: null
    }
  },
  created: function created() {
    this.currentIndex = undefined;
    this.uid = (0, kendo_vue_common_1.guid)();
    if (this.addChild) {
      this.addChild({
        chartKey: this.$props.chartKey,
        payload: Object.assign({}, this.$props.config),
        uid: this.uid
      });
    }
  },
  mounted: function mounted() {
    this.dispatch();
  },
  watch: {
    config: function config(newValue, oldValue) {
      if (JSON.stringify(newValue) !== JSON.stringify(oldValue)) {
        this.dispatch();
      }
    }
  },
  destroyed: !!isV3 ? undefined : function () {
    this.onDestroyed();
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.onDestroyed();
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlots = (0, kendo_vue_common_1.getDefaultSlots)(this);
    return h("div", [defaultSlots]);
  },
  methods: {
    onDestroyed: function onDestroyed() {
      if (this.removeChild) {
        this.removeChild({
          uid: this.uid
        });
        var _a = this.$props,
          chartKey = _a.chartKey,
          parentStore = _a.parentStore,
          config = _a.config;
        var dispatchOptions = parentStore || this.dispatchOptions;
        dispatchOptions({
          chartKey: chartKey,
          parentKey: this.parentKey,
          chartCollectionIdxKey: this.chartCollection + '_',
          uid: this.uid
        });
      }
    },
    addChildOption: function addChildOption(newChildState) {
      var _a;
      this.childState = __assign(__assign({}, this.childState), (_a = {}, _a[newChildState.chartKey] = newChildState.payload, _a));
      this.dispatch();
    },
    removeChildOption: function removeChildOption() {
      this.childState = {};
    },
    dispatch: function dispatch() {
      var _this = this;
      var _a = this.$props,
        chartKey = _a.chartKey,
        parentStore = _a.parentStore,
        config = _a.config;
      var dispatchOptions = parentStore || this.dispatchOptions;
      if (this.childOption) {
        this.addChild({
          chartKey: chartKey,
          payload: Object.assign({}, config, this.childState)
        });
        return;
      }
      if (this.chartCollection) {
        this.currentIndex = this.child.collection.findIndex(function (c) {
          return c.uid === _this.uid;
        });
        dispatchOptions({
          chartKey: chartKey,
          parentKey: this.parentKey,
          chartCollectionIdxKey: this.chartCollection + '_' + this.currentIndex,
          payload: Object.assign({}, config, {
            uid: this.uid
          }, this.childState)
        });
      } else {
        dispatchOptions({
          chartKey: chartKey,
          payload: Object.assign({}, config, this.childState)
        });
      }
    }
  }
};
exports.ConfigurationVue2 = ConfigurationVue2;
/**
 * @hidden
 */
var Configuration = ConfigurationVue2;
exports.Configuration = Configuration;