{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// array in local storage for registered users\nlet users = JSON.parse(localStorage.getItem('users')) || [{\n  username: \"admin\",\n  email: \"admin2@themesbrand.com\",\n  password: \"123456\"\n}];\nexport function configureFakeBackend() {\n  let realFetch = window.fetch;\n  window.fetch = function (url, opts) {\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(() => {\n        // authenticate\n        if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n          // get parameters from post request\n          let params = JSON.parse(opts.body);\n\n          // find if any user matches login credentials\n          let filteredUsers = users.filter(user => {\n            return user.email === params.email && user.password === params.password;\n          });\n          if (filteredUsers.length) {\n            // if login details are valid return user details and fake jwt token\n            // for example only passing in drupal login details for bearer token\n\n            let user = filteredUsers[0];\n            let responseJson = {\n              id: user.id,\n              username: user.username,\n              name: user.name,\n              email: user.email,\n              token: 'fake-jwt-token'\n            };\n            resolve({\n              ok: true,\n              text: () => Promise.resolve(JSON.stringify(responseJson))\n            });\n          } else {\n            // else return error\n            reject('These credentials do not match our records.');\n          }\n          return;\n        }\n\n        // get users\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\n            resolve({\n              ok: true,\n              text: () => Promise.resolve(JSON.stringify(users))\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject('Unauthorised');\n          }\n          return;\n        }\n\n        // get user by id\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\n          // check for fake auth token in header and return user if valid, this security is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\n            // find user by id in users array\n            let urlParts = url.split('/');\n            let id = parseInt(urlParts[urlParts.length - 1]);\n            let matchedUsers = users.filter(user => {\n              return user.id === id;\n            });\n            let user = matchedUsers.length ? matchedUsers[0] : null;\n\n            // respond 200 OK with user\n            resolve({\n              ok: true,\n              text: () => JSON.stringify(user)\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject('Unauthorised');\n          }\n          return;\n        }\n\n        // register user\n        if (url.endsWith('/users/register') && opts.method === 'POST') {\n          // get new user object from post body\n          let newUser = JSON.parse(opts.body);\n          // validation\n          let duplicateUser = users.filter(user => {\n            return user.username === newUser.username;\n          }).length;\n          if (duplicateUser) {\n            reject(\"Username '\" + newUser.username + \"' is already taken\");\n            return;\n          }\n\n          // save new user\n          newUser.id = users.length ? Math.max(...users.map(user => user.id)) + 1 : 1;\n          users.push(newUser);\n          localStorage.setItem('users', JSON.stringify(users));\n\n          // respond 200 OK\n          resolve({\n            ok: true,\n            text: () => Promise.resolve()\n          });\n          return;\n        }\n\n        // pass through any requests not handled above\n        realFetch(url, opts).then(response => resolve(response));\n      }, 500);\n    });\n  };\n}","map":{"version":3,"names":["users","JSON","parse","localStorage","getItem","username","email","password","configureFakeBackend","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","endsWith","method","params","body","filteredUsers","filter","user","length","responseJson","id","name","token","ok","text","stringify","headers","Authorization","match","urlParts","split","parseInt","matchedUsers","newUser","duplicateUser","Math","max","map","push","setItem","then","response"],"sources":["/Users/michaelrellaford/Documents/gamevue/Starterkit/src/helpers/fake-backend.js"],"sourcesContent":["// array in local storage for registered users\r\nlet users = JSON.parse(localStorage.getItem('users'))\r\n    || [{ username: \"admin\", email: \"admin2@themesbrand.com\", password: \"123456\" }];\r\n\r\nexport function configureFakeBackend() {\r\n\r\n    let realFetch = window.fetch;\r\n    window.fetch = function (url, opts) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            // wrap in timeout to simulate server api call\r\n            setTimeout(() => {\r\n\r\n                // authenticate\r\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\r\n                    // get parameters from post request\r\n                    let params = JSON.parse(opts.body);\r\n\r\n                    // find if any user matches login credentials\r\n                    let filteredUsers = users.filter(user => {\r\n                        return user.email === params.email && user.password === params.password;\r\n                    });\r\n\r\n                    if (filteredUsers.length) {\r\n                        // if login details are valid return user details and fake jwt token\r\n                        // for example only passing in drupal login details for bearer token\r\n                        \r\n                        let user = filteredUsers[0];\r\n                        let responseJson = {\r\n                            id: user.id,\r\n                            username: user.username,\r\n                            name: user.name,\r\n                            email: user.email,\r\n                            token: 'fake-jwt-token'\r\n                        };\r\n                        resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(responseJson)) });\r\n                    } else {\r\n                        // else return error\r\n                        reject('These credentials do not match our records.');\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                // get users\r\n                if (url.endsWith('/users') && opts.method === 'GET') {\r\n                    // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\r\n                    if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\r\n                        resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(users)) });\r\n                    } else {\r\n                        // return 401 not authorised if token is null or invalid\r\n                        reject('Unauthorised');\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                // get user by id\r\n                if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\r\n                    // check for fake auth token in header and return user if valid, this security is implemented server side in a real application\r\n                    if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\r\n                        // find user by id in users array\r\n                        let urlParts = url.split('/');\r\n                        let id = parseInt(urlParts[urlParts.length - 1]);\r\n                        let matchedUsers = users.filter(user => { return user.id === id; });\r\n                        let user = matchedUsers.length ? matchedUsers[0] : null;\r\n\r\n                        // respond 200 OK with user\r\n                        resolve({ ok: true, text: () => JSON.stringify(user) });\r\n                    } else {\r\n                        // return 401 not authorised if token is null or invalid\r\n                        reject('Unauthorised');\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                // register user\r\n                if (url.endsWith('/users/register') && opts.method === 'POST') {\r\n                    // get new user object from post body\r\n                    let newUser = JSON.parse(opts.body);\r\n                    // validation\r\n                    let duplicateUser = users.filter(user => { return user.username === newUser.username; }).length;\r\n                    if (duplicateUser) {\r\n                        reject(\"Username '\" + newUser.username + \"' is already taken\");\r\n                        return;\r\n                    }\r\n\r\n                    // save new user\r\n                    newUser.id = users.length ? Math.max(...users.map(user => user.id)) + 1 : 1;\r\n                    users.push(newUser);\r\n                    localStorage.setItem('users', JSON.stringify(users));\r\n\r\n                    // respond 200 OK\r\n                    resolve({ ok: true, text: () => Promise.resolve() });\r\n\r\n                    return;\r\n                }\r\n\r\n                // pass through any requests not handled above\r\n                realFetch(url, opts).then(response => resolve(response));\r\n\r\n            }, 500);\r\n        });\r\n    }\r\n}"],"mappings":";AAAA;AACA,IAAIA,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAC9C,CAAC;EAAEC,QAAQ,EAAE,OAAO;EAAEC,KAAK,EAAE,wBAAwB;EAAEC,QAAQ,EAAE;AAAS,CAAC,CAAC;AAEnF,OAAO,SAASC,oBAAoBA,CAAA,EAAG;EAEnC,IAAIC,SAAS,GAAGC,MAAM,CAACC,KAAK;EAC5BD,MAAM,CAACC,KAAK,GAAG,UAAUC,GAAG,EAAEC,IAAI,EAAE;IAEhC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpC;MACAC,UAAU,CAAC,MAAM;QAEb;QACA,IAAIL,GAAG,CAACM,QAAQ,CAAC,qBAAqB,CAAC,IAAIL,IAAI,CAACM,MAAM,KAAK,MAAM,EAAE;UAC/D;UACA,IAAIC,MAAM,GAAGnB,IAAI,CAACC,KAAK,CAACW,IAAI,CAACQ,IAAI,CAAC;;UAElC;UACA,IAAIC,aAAa,GAAGtB,KAAK,CAACuB,MAAM,CAACC,IAAI,IAAI;YACrC,OAAOA,IAAI,CAAClB,KAAK,KAAKc,MAAM,CAACd,KAAK,IAAIkB,IAAI,CAACjB,QAAQ,KAAKa,MAAM,CAACb,QAAQ;UAC3E,CAAC,CAAC;UAEF,IAAIe,aAAa,CAACG,MAAM,EAAE;YACtB;YACA;;YAEA,IAAID,IAAI,GAAGF,aAAa,CAAC,CAAC,CAAC;YAC3B,IAAII,YAAY,GAAG;cACfC,EAAE,EAAEH,IAAI,CAACG,EAAE;cACXtB,QAAQ,EAAEmB,IAAI,CAACnB,QAAQ;cACvBuB,IAAI,EAAEJ,IAAI,CAACI,IAAI;cACftB,KAAK,EAAEkB,IAAI,CAAClB,KAAK;cACjBuB,KAAK,EAAE;YACX,CAAC;YACDd,OAAO,CAAC;cAAEe,EAAE,EAAE,IAAI;cAAEC,IAAI,EAAEA,CAAA,KAAMjB,OAAO,CAACC,OAAO,CAACd,IAAI,CAAC+B,SAAS,CAACN,YAAY,CAAC;YAAE,CAAC,CAAC;UACpF,CAAC,MAAM;YACH;YACAV,MAAM,CAAC,6CAA6C,CAAC;UACzD;UACA;QACJ;;QAEA;QACA,IAAIJ,GAAG,CAACM,QAAQ,CAAC,QAAQ,CAAC,IAAIL,IAAI,CAACM,MAAM,KAAK,KAAK,EAAE;UACjD;UACA,IAAIN,IAAI,CAACoB,OAAO,IAAIpB,IAAI,CAACoB,OAAO,CAACC,aAAa,KAAK,uBAAuB,EAAE;YACxEnB,OAAO,CAAC;cAAEe,EAAE,EAAE,IAAI;cAAEC,IAAI,EAAEA,CAAA,KAAMjB,OAAO,CAACC,OAAO,CAACd,IAAI,CAAC+B,SAAS,CAAChC,KAAK,CAAC;YAAE,CAAC,CAAC;UAC7E,CAAC,MAAM;YACH;YACAgB,MAAM,CAAC,cAAc,CAAC;UAC1B;UAEA;QACJ;;QAEA;QACA,IAAIJ,GAAG,CAACuB,KAAK,CAAC,eAAe,CAAC,IAAItB,IAAI,CAACM,MAAM,KAAK,KAAK,EAAE;UACrD;UACA,IAAIN,IAAI,CAACoB,OAAO,IAAIpB,IAAI,CAACoB,OAAO,CAACC,aAAa,KAAK,uBAAuB,EAAE;YACxE;YACA,IAAIE,QAAQ,GAAGxB,GAAG,CAACyB,KAAK,CAAC,GAAG,CAAC;YAC7B,IAAIV,EAAE,GAAGW,QAAQ,CAACF,QAAQ,CAACA,QAAQ,CAACX,MAAM,GAAG,CAAC,CAAC,CAAC;YAChD,IAAIc,YAAY,GAAGvC,KAAK,CAACuB,MAAM,CAACC,IAAI,IAAI;cAAE,OAAOA,IAAI,CAACG,EAAE,KAAKA,EAAE;YAAE,CAAC,CAAC;YACnE,IAAIH,IAAI,GAAGe,YAAY,CAACd,MAAM,GAAGc,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI;;YAEvD;YACAxB,OAAO,CAAC;cAAEe,EAAE,EAAE,IAAI;cAAEC,IAAI,EAAEA,CAAA,KAAM9B,IAAI,CAAC+B,SAAS,CAACR,IAAI;YAAE,CAAC,CAAC;UAC3D,CAAC,MAAM;YACH;YACAR,MAAM,CAAC,cAAc,CAAC;UAC1B;UAEA;QACJ;;QAEA;QACA,IAAIJ,GAAG,CAACM,QAAQ,CAAC,iBAAiB,CAAC,IAAIL,IAAI,CAACM,MAAM,KAAK,MAAM,EAAE;UAC3D;UACA,IAAIqB,OAAO,GAAGvC,IAAI,CAACC,KAAK,CAACW,IAAI,CAACQ,IAAI,CAAC;UACnC;UACA,IAAIoB,aAAa,GAAGzC,KAAK,CAACuB,MAAM,CAACC,IAAI,IAAI;YAAE,OAAOA,IAAI,CAACnB,QAAQ,KAAKmC,OAAO,CAACnC,QAAQ;UAAE,CAAC,CAAC,CAACoB,MAAM;UAC/F,IAAIgB,aAAa,EAAE;YACfzB,MAAM,CAAC,YAAY,GAAGwB,OAAO,CAACnC,QAAQ,GAAG,oBAAoB,CAAC;YAC9D;UACJ;;UAEA;UACAmC,OAAO,CAACb,EAAE,GAAG3B,KAAK,CAACyB,MAAM,GAAGiB,IAAI,CAACC,GAAG,CAAC,GAAG3C,KAAK,CAAC4C,GAAG,CAACpB,IAAI,IAAIA,IAAI,CAACG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;UAC3E3B,KAAK,CAAC6C,IAAI,CAACL,OAAO,CAAC;UACnBrC,YAAY,CAAC2C,OAAO,CAAC,OAAO,EAAE7C,IAAI,CAAC+B,SAAS,CAAChC,KAAK,CAAC,CAAC;;UAEpD;UACAe,OAAO,CAAC;YAAEe,EAAE,EAAE,IAAI;YAAEC,IAAI,EAAEA,CAAA,KAAMjB,OAAO,CAACC,OAAO,CAAC;UAAE,CAAC,CAAC;UAEpD;QACJ;;QAEA;QACAN,SAAS,CAACG,GAAG,EAAEC,IAAI,CAAC,CAACkC,IAAI,CAACC,QAAQ,IAAIjC,OAAO,CAACiC,QAAQ,CAAC,CAAC;MAE5D,CAAC,EAAE,GAAG,CAAC;IACX,CAAC,CAAC;EACN,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}