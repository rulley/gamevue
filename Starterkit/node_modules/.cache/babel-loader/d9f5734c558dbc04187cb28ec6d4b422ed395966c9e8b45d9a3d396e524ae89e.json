{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport { userService } from '../../helpers/authservice/user.service';\nimport router from '../../router/index';\nvar user = JSON.parse(localStorage.getItem('user'));\nexport var state = user ? {\n  status: {\n    loggeduser: true\n  },\n  user: user\n} : {\n  status: {},\n  user: null\n};\nexport var actions = {\n  // Logs in the user.\n  // eslint-disable-next-line no-unused-vars\n  login: function login(_ref, _ref2) {\n    var dispatch = _ref.dispatch,\n      commit = _ref.commit;\n    var email = _ref2.email,\n      password = _ref2.password;\n    commit('loginRequest', {\n      email: email\n    });\n    userService.login(email, password).then(function (user) {\n      commit('loginSuccess', user);\n      router.push('/');\n    }, function (error) {\n      commit('loginFailure', error);\n      dispatch('notification/error', error, {\n        root: true\n      });\n    });\n  },\n  // Logout the user\n  logout: function logout(_ref3) {\n    var commit = _ref3.commit;\n    userService.logout();\n    commit('logout');\n  },\n  // register the user\n  registeruser: function registeruser(_ref4, user) {\n    var dispatch = _ref4.dispatch,\n      commit = _ref4.commit;\n    commit('registerRequest', user);\n    userService.register(user).then(function (user) {\n      commit('registerSuccess', user);\n      dispatch('notification/success', 'Registration successful', {\n        root: true\n      });\n      router.push('/login');\n    }, function (error) {\n      commit('registerFailure', error);\n      dispatch('notification/error', error, {\n        root: true\n      });\n    });\n  }\n};\nexport var mutations = {\n  loginRequest: function loginRequest(state, user) {\n    state.status = {\n      loggingIn: true\n    };\n    state.user = user;\n  },\n  loginSuccess: function loginSuccess(state, user) {\n    state.status = {\n      loggeduser: true\n    };\n    state.user = user;\n  },\n  loginFailure: function loginFailure(state) {\n    state.status = {};\n    state.user = null;\n  },\n  logout: function logout(state) {\n    state.status = {};\n    state.user = null;\n  },\n  registerRequest: function registerRequest(state) {\n    state.status = {\n      registering: true\n    };\n  },\n  registerSuccess: function registerSuccess(state) {\n    state.status = {};\n  },\n  registerFailure: function registerFailure(state) {\n    state.status = {};\n  }\n};","map":{"version":3,"names":["userService","router","user","JSON","parse","localStorage","getItem","state","status","loggeduser","actions","login","_ref","_ref2","dispatch","commit","email","password","then","push","error","root","logout","_ref3","registeruser","_ref4","register","mutations","loginRequest","loggingIn","loginSuccess","loginFailure","registerRequest","registering","registerSuccess","registerFailure"],"sources":["/Users/michaelrellaford/Documents/gamevue/Starterkit/src/state/modules/authfack.js"],"sourcesContent":["import { userService } from '../../helpers/authservice/user.service';\r\nimport router from '../../router/index'\r\n\r\nconst user = JSON.parse(localStorage.getItem('user'));\r\nexport const state = user\r\n    ? { status: { loggeduser: true }, user }\r\n    : { status: {}, user: null };\r\n\r\nexport const actions = {\r\n    // Logs in the user.\r\n    // eslint-disable-next-line no-unused-vars\r\n    login({ dispatch, commit }, { email, password }) {\r\n        commit('loginRequest', { email });\r\n\r\n        userService.login(email, password)\r\n            .then(\r\n                user => {\r\n                    commit('loginSuccess', user);\r\n                    router.push('/');\r\n                },\r\n                error => {\r\n                    commit('loginFailure', error);\r\n                    dispatch('notification/error', error, { root: true });\r\n                }\r\n            );\r\n    },\r\n    // Logout the user\r\n    logout({ commit }) {\r\n        userService.logout();\r\n        commit('logout');\r\n    },\r\n    // register the user\r\n    registeruser({ dispatch, commit }, user) {\r\n        commit('registerRequest', user);\r\n        userService.register(user)\r\n            .then(\r\n                user => {\r\n                    commit('registerSuccess', user);\r\n                    dispatch('notification/success', 'Registration successful', { root: true });\r\n                    router.push('/login');\r\n                },\r\n                error => {\r\n                    commit('registerFailure', error);\r\n                    dispatch('notification/error', error, { root: true });\r\n                }\r\n            );\r\n    }\r\n};\r\n\r\nexport const mutations = {\r\n    loginRequest(state, user) {\r\n        state.status = { loggingIn: true };\r\n        state.user = user;\r\n    },\r\n    loginSuccess(state, user) {\r\n        state.status = { loggeduser: true };\r\n        state.user = user;\r\n    },\r\n    loginFailure(state) {\r\n        state.status = {};\r\n        state.user = null;\r\n    },\r\n    logout(state) {\r\n        state.status = {};\r\n        state.user = null;\r\n    },\r\n    registerRequest(state) {\r\n        state.status = { registering: true };\r\n    },\r\n    registerSuccess(state) {\r\n        state.status = {};\r\n    },\r\n    registerFailure(state) {\r\n        state.status = {};\r\n    }\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}