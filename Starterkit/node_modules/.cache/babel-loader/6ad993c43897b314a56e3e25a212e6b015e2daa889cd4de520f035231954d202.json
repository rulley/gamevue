{"ast":null,"code":"import _toConsumableArray from \"/Users/michaelrellaford/Documents/velgame/Starterkit/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.match.js\";\n// array in local storage for registered users\nvar users = JSON.parse(localStorage.getItem('users')) || [{\n  username: \"admin\",\n  email: \"admin2@themesbrand.com\",\n  password: \"123456\"\n}];\nexport function configureFakeBackend() {\n  var realFetch = window.fetch;\n  window.fetch = function (url, opts) {\n    return new Promise(function (resolve, reject) {\n      // wrap in timeout to simulate server api call\n      setTimeout(function () {\n        // authenticate\n        if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n          // get parameters from post request\n          var params = JSON.parse(opts.body);\n\n          // find if any user matches login credentials\n          var filteredUsers = users.filter(function (user) {\n            return user.email === params.email && user.password === params.password;\n          });\n          if (filteredUsers.length) {\n            // if login details are valid return user details and fake jwt token\n            // for example only passing in drupal login details for bearer token\n            var username = 'test';\n            var pass = 'Test123';\n            var client_secret = 'abc123';\n            var client_id = '7bcc8836-6c3d-4dd7-b4e2-1cd1ab39e2a3';\n            var drupaloath = 'https://dev-gametest.pantheonsite.io//oauth/token';\n            var oauthdetails = {\n              'grant_type': 'password',\n              'username': username,\n              'password': pass,\n              'client_id': client_id,\n              'client_secret': client_secret\n            };\n            var formBody = [];\n            for (var property in oauthdetails) {\n              var encodedKey = encodeURIComponent(property);\n              var encodedValue = encodeURIComponent(oauthdetails[property]);\n              formBody.push(encodedKey + \"=\" + encodedValue);\n            }\n            formBody = formBody.join(\"&\");\n            fetch(drupaloath, {\n              mode: 'cors',\n              method: \"post\",\n              headers: {\n                'Accept': 'application/vnd.api+json',\n                //'Content-Type': 'application/json'\n                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n              },\n              //make sure to serialize your JSON body\n              body: formBody\n            }).then(function (response) {\n              return response.json();\n            }).then(function (json) {\n              var accesstoken = json.access_token;\n            });\n            //.then( (response) => { \n            //do something awesome that makes the world a better place\n            //});\n\n            var user = filteredUsers[0];\n            var responseJson = {\n              id: user.id,\n              username: user.username,\n              name: user.name,\n              email: user.email\n              //token: accesstoken\n            };\n            resolve({\n              ok: true,\n              text: function text() {\n                return Promise.resolve(JSON.stringify(responseJson));\n              }\n            });\n          } else {\n            // else return error\n            reject('These credentials do not match our records.');\n          }\n          return;\n        }\n\n        // get users\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\n            resolve({\n              ok: true,\n              text: function text() {\n                return Promise.resolve(JSON.stringify(users));\n              }\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject('Unauthorised');\n          }\n          return;\n        }\n\n        // get user by id\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\n          // check for fake auth token in header and return user if valid, this security is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\n            // find user by id in users array\n            var urlParts = url.split('/');\n            var id = parseInt(urlParts[urlParts.length - 1]);\n            var matchedUsers = users.filter(function (user) {\n              return user.id === id;\n            });\n            var _user = matchedUsers.length ? matchedUsers[0] : null;\n\n            // respond 200 OK with user\n            resolve({\n              ok: true,\n              text: function text() {\n                return JSON.stringify(_user);\n              }\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject('Unauthorised');\n          }\n          return;\n        }\n\n        // register user\n        if (url.endsWith('/users/register') && opts.method === 'POST') {\n          // get new user object from post body\n          var newUser = JSON.parse(opts.body);\n          // validation\n          var duplicateUser = users.filter(function (user) {\n            return user.username === newUser.username;\n          }).length;\n          if (duplicateUser) {\n            reject(\"Username '\" + newUser.username + \"' is already taken\");\n            return;\n          }\n\n          // save new user\n          newUser.id = users.length ? Math.max.apply(Math, _toConsumableArray(users.map(function (user) {\n            return user.id;\n          }))) + 1 : 1;\n          users.push(newUser);\n          localStorage.setItem('users', JSON.stringify(users));\n\n          // respond 200 OK\n          resolve({\n            ok: true,\n            text: function text() {\n              return Promise.resolve();\n            }\n          });\n          return;\n        }\n\n        // pass through any requests not handled above\n        realFetch(url, opts).then(function (response) {\n          return resolve(response);\n        });\n      }, 500);\n    });\n  };\n}","map":{"version":3,"names":["users","JSON","parse","localStorage","getItem","username","email","password","configureFakeBackend","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","endsWith","method","params","body","filteredUsers","filter","user","length","pass","client_secret","client_id","drupaloath","oauthdetails","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","mode","headers","then","response","json","accesstoken","access_token","responseJson","id","name","ok","text","stringify","Authorization","match","urlParts","split","parseInt","matchedUsers","newUser","duplicateUser","Math","max","apply","_toConsumableArray","map","setItem"],"sources":["/Users/michaelrellaford/Documents/velgame/Starterkit/src/helpers/fake-backend.js"],"sourcesContent":["// array in local storage for registered users\r\nlet users = JSON.parse(localStorage.getItem('users'))\r\n    || [{ username: \"admin\", email: \"admin2@themesbrand.com\", password: \"123456\" }];\r\n\r\nexport function configureFakeBackend() {\r\n\r\n    let realFetch = window.fetch;\r\n    window.fetch = function (url, opts) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            // wrap in timeout to simulate server api call\r\n            setTimeout(() => {\r\n\r\n                // authenticate\r\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\r\n                    // get parameters from post request\r\n                    let params = JSON.parse(opts.body);\r\n\r\n                    // find if any user matches login credentials\r\n                    let filteredUsers = users.filter(user => {\r\n                        return user.email === params.email && user.password === params.password;\r\n                    });\r\n\r\n                    if (filteredUsers.length) {\r\n                        // if login details are valid return user details and fake jwt token\r\n                        // for example only passing in drupal login details for bearer token\r\n                        const username = 'test';\r\n                        const pass = 'Test123';\r\n                        const client_secret = 'abc123';\r\n                        const client_id = '7bcc8836-6c3d-4dd7-b4e2-1cd1ab39e2a3';\r\n                        const drupaloath = 'https://dev-gametest.pantheonsite.io//oauth/token';\r\n\r\n                        var oauthdetails = {\r\n                            'grant_type': 'password',\r\n                            'username': username,\r\n                            'password': pass,\r\n                            'client_id': client_id,\r\n                            'client_secret': client_secret,\r\n                        };\r\n\r\n                        var formBody = [];\r\n                        for (var property in oauthdetails) {\r\n                          var encodedKey = encodeURIComponent(property);\r\n                          var encodedValue = encodeURIComponent(oauthdetails[property]);\r\n                          formBody.push(encodedKey + \"=\" + encodedValue);\r\n                        }\r\n                        formBody = formBody.join(\"&\");\r\n\r\n                        fetch(drupaloath, {\r\n                        mode:  'cors',\r\n                        method: \"post\",\r\n                        headers: {\r\n                            'Accept': 'application/vnd.api+json',\r\n                            //'Content-Type': 'application/json'\r\n                            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\r\n                        },\r\n\r\n                        //make sure to serialize your JSON body\r\n                        body: formBody\r\n                        })\r\n                        .then((response) => response.json())\r\n                        .then((json) => {const accesstoken = json.access_token;})\r\n                        //.then( (response) => { \r\n                        //do something awesome that makes the world a better place\r\n                        //});\r\n                        \r\n\r\n                        let user = filteredUsers[0];\r\n                        let responseJson = {\r\n                            id: user.id,\r\n                            username: user.username,\r\n                            name: user.name,\r\n                            email: user.email,\r\n                            //token: accesstoken\r\n                        };\r\n                        resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(responseJson)) });\r\n                    } else {\r\n                        // else return error\r\n                        reject('These credentials do not match our records.');\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                // get users\r\n                if (url.endsWith('/users') && opts.method === 'GET') {\r\n                    // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\r\n                    if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\r\n                        resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(users)) });\r\n                    } else {\r\n                        // return 401 not authorised if token is null or invalid\r\n                        reject('Unauthorised');\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                // get user by id\r\n                if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\r\n                    // check for fake auth token in header and return user if valid, this security is implemented server side in a real application\r\n                    if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\r\n                        // find user by id in users array\r\n                        let urlParts = url.split('/');\r\n                        let id = parseInt(urlParts[urlParts.length - 1]);\r\n                        let matchedUsers = users.filter(user => { return user.id === id; });\r\n                        let user = matchedUsers.length ? matchedUsers[0] : null;\r\n\r\n                        // respond 200 OK with user\r\n                        resolve({ ok: true, text: () => JSON.stringify(user) });\r\n                    } else {\r\n                        // return 401 not authorised if token is null or invalid\r\n                        reject('Unauthorised');\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                // register user\r\n                if (url.endsWith('/users/register') && opts.method === 'POST') {\r\n                    // get new user object from post body\r\n                    let newUser = JSON.parse(opts.body);\r\n                    // validation\r\n                    let duplicateUser = users.filter(user => { return user.username === newUser.username; }).length;\r\n                    if (duplicateUser) {\r\n                        reject(\"Username '\" + newUser.username + \"' is already taken\");\r\n                        return;\r\n                    }\r\n\r\n                    // save new user\r\n                    newUser.id = users.length ? Math.max(...users.map(user => user.id)) + 1 : 1;\r\n                    users.push(newUser);\r\n                    localStorage.setItem('users', JSON.stringify(users));\r\n\r\n                    // respond 200 OK\r\n                    resolve({ ok: true, text: () => Promise.resolve() });\r\n\r\n                    return;\r\n                }\r\n\r\n                // pass through any requests not handled above\r\n                realFetch(url, opts).then(response => resolve(response));\r\n\r\n            }, 500);\r\n        });\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}