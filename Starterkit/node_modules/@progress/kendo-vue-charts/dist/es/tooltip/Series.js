// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { classNames, getTemplate } from '@progress/kendo-vue-common';
import { InstanceObserver } from '@progress/kendo-charts';
import { TooltipPoint } from './Point';
import { SharedTooltipContent } from './SharedTooltipContent';
import { TooltipPopup } from './Popup';
var SHARED_TOOLTIP_CLASS = 'k-chart-shared-tooltip';
var INVERSE_TOOLTIP_CLASS = 'k-chart-tooltip-inverse';
/**
 * @hidden
 */
var SeriesTooltipVue2 = {
  name: 'KendoSeriesTooltip',
  // static contextType = ChartContext;
  data: function data() {
    return {
      popupShown: false,
      popupAlign: undefined,
      popupOffset: undefined,
      popupContext: {},
      popupStyles: undefined,
      className: undefined,
      shared: undefined
    };
  },
  inject: {
    optionsState: {
      default: {}
    },
    observersState: {
      default: null
    },
    dispatchObservers: {
      default: null
    }
  },
  // chartObserver: InstanceObserver;
  mounted: function mounted() {
    // This is moved here as calls to the listed methods contains
    // setState which is restricted before component mount
    this.chartObserver = new InstanceObserver(this, {
      showTooltip: 'onShowTooltip',
      hideTooltip: 'onHideTooltip'
    });
    this.dispatchObservers({
      type: 'add',
      payload: this.chartObserver
    });
  },
  destroyed: !!isV3 ? undefined : function () {
    this.dispatchObservers({
      type: 'remove',
      payload: this.chartObserver
    });
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.dispatchObservers({
      type: 'remove',
      payload: this.chartObserver
    });
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var _this = this;
    var _a;
    var h = gh || createElement;
    var tooltipContent = this.popupShown ? function () {
      var render = this.findRenderFunction();
      if (this.shared) {
        var defaultSharedToolTip =
        // @ts-ignore  function children
        h(SharedTooltipContent, {
          categoryText: this.popupContext.categoryText,
          attrs: this.v3 ? undefined : {
            categoryText: this.popupContext.categoryText,
            colorMarker: this.popupContext.colorMarker,
            colspan: this.popupContext.colspan,
            nameColumn: this.popupContext.nameColumn,
            points: this.popupContext.points
          },
          colorMarker: this.popupContext.colorMarker,
          colspan: this.popupContext.colspan,
          nameColumn: this.popupContext.nameColumn,
          points: this.popupContext.points
        });
        return getTemplate.call(this, {
          h: h,
          template: render,
          defaultRendering: defaultSharedToolTip,
          additionalProps: Object.assign({}, this.popupContext)
        });
      } else {
        var point = this.popupContext.point;
        var seriesRenderer = this.findRenderFunctionByIndex(point.series.index);
        var defaultTooltip = h('span', {
          domProps: {
            innerHTML: this.popupContext.point.formattedValue
          },
          innerHTML: this.popupContext.point.formattedValue
        });
        if (seriesRenderer !== null) {
          return getTemplate.call(this, {
            h: h,
            template: seriesRenderer,
            defaultRendering: defaultTooltip,
            additionalProps: Object.assign({}, this.popupContext)
          });
        } else if (render !== null) {
          return getTemplate.call(this, {
            h: h,
            template: render,
            defaultRendering: defaultTooltip,
            additionalProps: Object.assign({}, this.popupContext)
          });
        } else {
          return defaultTooltip;
        }
      }
    } : Function.prototype;
    var popupContainerClassName = classNames((_a = {}, _a[SHARED_TOOLTIP_CLASS] = this.shared, _a[INVERSE_TOOLTIP_CLASS] = !!this.className, _a));
    return (
      // @ts-ignore  function children
      h(TooltipPopup, {
        popupShown: this.popupShown,
        attrs: this.v3 ? undefined : {
          popupShown: this.popupShown,
          popupAlign: this.popupAlign,
          popupOffset: this.popupOffset,
          popupStyles: this.popupStyles,
          className: popupContainerClassName
        },
        popupAlign: this.popupAlign,
        popupOffset: this.popupOffset,
        popupStyles: this.popupStyles,
        className: popupContainerClassName
      }, this.v3 ? function () {
        return [tooltipContent.call(_this)];
      } : [tooltipContent.call(_this)])
    );
  },
  methods: {
    onShowTooltip: function onShowTooltip(e) {
      var anchor = e.anchor,
        style = e.style,
        shared = e.shared,
        className = e.className,
        crosshair = e.crosshair;
      var context;
      if (crosshair) {
        return;
      }
      if (shared) {
        context = this.createSharedTooltipContext(e);
      } else {
        context = this.createTooltipContext(e);
      }
      this.popupShown = true;
      this.popupAlign = anchor.align;
      this.popupOffset = anchor.point;
      this.popupContext = context;
      this.popupStyles = style;
      this.className = className;
      this.shared = shared;
    },
    onHideTooltip: function onHideTooltip() {
      this.popupShown = false;
      this.popupStyles = {};
      this.className = undefined;
    },
    createSharedTooltipContext: function createSharedTooltipContext(e) {
      var points = e.points,
        categoryText = e.categoryText;
      var nameColumn = points.filter(function (point) {
        return typeof point.series.name !== 'undefined';
      }).length > 0;
      var colorMarker = e.series.length > 1;
      var colspan = 1;
      if (nameColumn) {
        colspan++;
      }
      if (colorMarker) {
        colspan++;
      }
      return {
        categoryText: categoryText,
        colorMarker: colorMarker,
        colspan: colspan,
        nameColumn: nameColumn,
        points: e.points.map(function (point) {
          return new TooltipPoint(point, e.format);
        })
      };
    },
    createTooltipContext: function createTooltipContext(e) {
      var point = e.point,
        format = e.format;
      return {
        point: new TooltipPoint(point, format)
      };
    },
    findRenderFunctionByIndex: function findRenderFunctionByIndex(seriesIdx) {
      var series = this.optionsState.series;
      if (series !== undefined && Array.isArray(series) && series[seriesIdx] !== undefined && series[seriesIdx].hasOwnProperty('tooltip') && series[seriesIdx].tooltip.hasOwnProperty('render')) {
        return series[seriesIdx].tooltip.render;
      }
      return null;
    },
    findRenderFunction: function findRenderFunction() {
      var tooltip = this.optionsState.tooltip;
      if (tooltip !== undefined && tooltip.hasOwnProperty('render')) {
        return tooltip.render;
      }
      return null;
    }
  }
};
/**
 * @hidden
 */
var SeriesTooltip = SeriesTooltipVue2;
export { SeriesTooltip, SeriesTooltipVue2 };